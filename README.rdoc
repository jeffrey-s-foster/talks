= Talks.cs.umd.edu

== Local installation (for testing)

This web app requires Rails 3.1 and was developed under
ruby-1.9.2-p180. I recommend using {rvm}[http://beginrescueend.com/]
to install Ruby. Then do

  # skip the following steps if you're already using 1.9.2
  rvm install ruby-1.9.2
  rvm 1.9.2
  rvm default
  gem install rails

  cd talks/
  bundle install       # install all necessary packages
  rake db:schema:load  # create the database
  script/rails s       # start the server on localhost:3000

Then go to localhost:3000 and create an account for yourself. The
email sending probably won't work if you're on a local machine, so
look in log/development.log for the confirmation email that was sent
(search for "Confirm my account"), and enter the link. You'll probably
also want to make yourself an administrator, which you can do with

  sqlite3 db/development.sqlite3
  > update users set perm_site_admin = "1" where id = "1";

(You can probably set the confirmation info using sqlite3, also.)

Also edit config/locals/en.yml, including
* site_name

== Deployment

* RAILS_ENV=production rake db:setup
* bundle exec rake assets:precompile
* config/environments/production.rb, update config.action_mailer.default_url_options
* config/initializers/devise.rb, update config.mailer_sender
* app/views/layouts/application.html.erb, change "talk.cs.umd.edu"
* bundle config build.sqlite3 -- --with-sqlite3-include=/usr/local/sqlite-3.7.6.3/include --with-sqlite3-lib=/usr/local/sqlite-3.7.6.3/lib
* bundle --deployment (install gems locally for phusion passenger)
  (For us, add /usr/local/ruby-1.9.3-p0/bin to path before doing that)
* Register
* sqlite3 db/development.sqlite3
  > update users set perm_site_admin = "1" where id = "1";

== Update (put this in a capfile)

* git pull
* bundle --deployment
* rake assets:precompile
* cd public
  * find . -type d -exec chmod go+x {} \;
  * chmod -R a+r .
* touch tmp/restart.txt
* RAILS_ENV=production script/delayed_job restart

== Permission model

(See app/models/ability.rb for full details)

* Global roles
  * :perm_site_admin - permission to do anything on the site
    * Only admins can create a new list
  * :perm_create_talk - permission to create a talk
* Relationships
  * Each talk belongs_to one owner (user, can't be empty)
  * Each talk has_and_belongs_to_many lists (may be empty)
  * Each list has_and_belongs_to_many posters (users)
  * Each list has_and_belongs_to_many admins (users)
* Local roles
  * A talk may be created by anyone with :perm_create_talk permission
  * A talk may be added to a list by anyone with permission to post to that list
  * A talk may be edited/deleted by the creator of the talk or by an admin of any list the talk is posted to
  * A user may be granted or revoked list poster or admin permission by an admin of that list

== Miscellaneous

* {Color scheme}[http://colorschemedesigner.com/#0041YqqvKv5v5]
* {Button generator}[http://www.help4web.net/rss_button/index.php] - left-side background color 23ca23, right-side background color 888888, vertical bar position 12

== TODO list

* LDAP support for UMCP Directory IDs.  Using these is one less
  barrier to adoption, since people already have a directory ID.  Ping
  Neil for Rails code to do this, since he uses it for his graduate
  admissions website.

  Also see:

  * {UMD CAS FAQ}[http://login.umd.edu/developer.html]
  * {devise_cas_authenticatable}[https://github.com/nbudin/devise_cas_authenticatable]

* Support for tags.  The idea would be able to create a "smart" list
  based on tags indicated by the user.  For example, all talks that
  have tag Foo but not tag Bar.  This list is automatically updated
  whenever new talks are put in the system.

* More efficient queries in functions added to models/list.rb,
  models/user.rb, and models/talk.rb

* Add ssl for ical feed?

* rss/ical feeds - only include past n talks, e.g., past 1 year

* watch implementation
  * Send email (only) to new list subscribers if talk is cross-posted to a new list
  * Send email on cancellation
  * Indicate in email update whether you are subscribed to the talk or not

* disable (really) users from cancelling accounts? or enable it fully

* split lists window so list info is on left, talks on right

* what happens to posted talks when a user is deleted?

* icon for poster?

* what happens if talk cross-posted by another user, then orig user
  tries to edit the talk?

* Also, when I changed my password, it behaved oddly.  It immediately
  said I was not authorized to access the page I was on, because, I
  think, it kicked me off of the site.  I had to log in again, and now
  things seem to be OK.

* Have an option for people to subscribe not only to talks but also to
  Deptl scheduling (meetings, picnics, and maybe even spring break
  dates, end of classes, last day to submit grades, etc).

* Talks from outside the dept?

* Dissertation proposals/defesnses/etc

* ssl?
* https://github.com/plataformatec/devise/wiki/How-To:-Use-SSL-(HTTPS)

* link to it on the dept home page

* Clean up this week emails to organize by day of the week

* It'd be nice to have a way to get a list of all talks in the coming
  week e-mailed to me on Sunday (regardless of my subscriptions). This
  way I can discover new talks/lists that would be interesting without
  remembering to check the talks page each week. I think this would
  probably require creating an "Options" framework.

* The "Watch" button changes to "Unsubscribe" when you click on it, not "Unwatch".

* I think there's a layout error on the list pages, e.g., on
  http://talks.cs.umd.edu/lists/1, "Upcoming talks" and "Further
  ahead" are at different indent levels, compared to the home page. Or
  is it that "Further ahead" should be hidden unless "See all talks"
  is clicked? I don't think "See all talks" is necessary, but if you
  anticipate that there will be an excessive number of talks scheduled
  ahead of time, use links like "Previous/Next 100 talks".

* Can you add dates next to the days of week?

* Support email from list organizer to all subscribers.

* beginning of day on upcoming talks?

* restrict "all" talks to some time period (1-2 years?)

* One anomaly I've noticed in the interface for entering talk data is
  the deletion of carriage returns in abstracts / bios.  One the one
  hand, this is useful when e.g. one is cutting and pasting from an
  e-mail message that includes (emacs-inserted) hard carriage returns
  at the ends of lines.  On the other, it also removes paragraph
  boundaries, leading to awkward-sounding phrasing.  How about this as
  an alternative: one or fewer CRs -> 0 CR.  >= 2 CRs -> 2 CRs?
